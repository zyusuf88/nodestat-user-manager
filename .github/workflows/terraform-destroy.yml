name: Terraform Destroy

on:
  workflow_dispatch:
    inputs:
      confirm_destroy:
        description: 'Type "destroy" to confirm destruction'
        required: true
        type: string
      container_image:
        description: "Full container image URI (e.g. 123456.dkr.ecr.us-east-1.amazonaws.com/node-app:latest)"
        required: true
        type: string

permissions:
  contents: read
  actions: write

jobs:
  terraform_destroy:
    name: Full Terraform Destroy
    runs-on: ubuntu-latest
    if: github.event.inputs.confirm_destroy == 'destroy'

    defaults:
      run:
        working-directory: ./terraform

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0

      - name: Download tfvars from S3
        run: aws s3 cp s3://my-apps-state-bucket12/configs/terraform.tfvars terraform.tfvars

      - name: Terraform Init
        run: |
          terraform init \
            -backend-config="bucket=${{ secrets.TERRAFORM_STATE_BUCKET }}" \
            -backend-config="key=${{ secrets.TERRAFORM_STATE_KEY }}" \
            -backend-config="region=${{ secrets.AWS_REGION }}" \
            -backend-config="encrypt=true"

      - name: Destroy ALB
        run: terraform destroy -input=false -target=module.alb -auto-approve

      - name: Destroy Lambda
        run: terraform destroy -input=false -target=module.lambda -auto-approve

      - name: Terraform Refresh
        run: terraform refresh -input=false

      - name: Terraform Full Destroy
        run: terraform destroy -input=false -auto-approve

      - name: Delete ECR Images
        run: |
          IMAGE="${{ github.event.inputs.container_image }}"
          REPOSITORY=$(echo "$IMAGE" | cut -d '/' -f2 | cut -d ':' -f1)
          TAG=$(echo "$IMAGE" | cut -d ':' -f2)
          echo "REPOSITORY=$REPOSITORY" >> $GITHUB_ENV
          echo "TAG=$TAG" >> $GITHUB_ENV
          aws ecr batch-delete-image \
              --repository-name "$REPOSITORY" \
              --image-ids imageTag="$TAG"
