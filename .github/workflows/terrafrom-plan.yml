name: Terraform Plan

on:
  workflow_dispatch:
    inputs:
      confirm_plan:
        description: 'Type "plan" to confirm generating a plan'
        required: true
        type: string
      ecr_repository:
        description: "Full ECR image URI with tag (e.g., 123456789012.dkr.ecr.us-east-1.amazonaws.com/my-app:latest)"
        required: true
        type: string

permissions:
  contents: read
  pull-requests: write
  actions: write

jobs:
  security_checks:
    name: "Security Checks"
    runs-on: ubuntu-latest
    if: github.event.inputs.confirm_plan == 'plan'

    defaults:
      run:
        working-directory: ./terraform

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v1
        continue-on-error: true
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        with:
          projectBaseDir: ./terraform
          args: >
            -Dsonar.projectKey=${{ vars.PROJECT_NAME }}
            -Dsonar.projectName=${{ vars.PROJECT_NAME }}
            -Dsonar.organization=${{ vars.SONAR_ORGANIZATION }}
            -Dsonar.sources=.

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install Rust
        run: |
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Verify Rust Installation
        run: rustc --version

      - name: Install rustworkx before Checkov
        run: |
          pip install rustworkx
          pip install --upgrade pip
          pip install --prefer-binary checkov

      - name: Run Checkov
        run: checkov -d . --soft-fail

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        continue-on-error: true
        with:
          image-ref: "${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ vars.REPOSITORY_NAME }}:${{ vars.IMAGE_TAG }}"
          format: "table"
          exit-code: "0"
          severity: "CRITICAL,HIGH"

  terraform_plan:
    name: "Terraform Plan"
    runs-on: ubuntu-latest
    needs: security_checks
    if: github.event.inputs.confirm_plan == 'plan'

    defaults:
      run:
        working-directory: ./terraform

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0

      - name: Terraform Init
        run: |
          terraform init \
            -backend-config="bucket=${{ secrets.TERRAFORM_STATE_BUCKET }}" \
            -backend-config="key=${{ secrets.TERRAFORM_STATE_KEY }}" \
            -backend-config="region=${{ secrets.AWS_REGION }}" \
            -backend-config="encrypt=true"

      - name: Terraform Validate
        run: terraform validate

      # - name: Refresh Terraform State
      #   run: |
      #     terraform refresh \
      #       -var="domain_name=${{ vars.DOMAIN_NAME }}" \
      #       -var="project_name=${{ vars.PROJECT_NAME }}" \
      #       -var="record_name=${{ vars.RECORD_NAME }}" \
      #       -var="task_role_arn=${{ secrets.TASK_ROLE_ARN }}" \
      #       -var="execution_role_arn=${{ secrets.EXECUTION_ROLE_ARN }}" \          
      #       -var="db_name=${{ vars.DB_NAME }}" \
      #       -var="s3_bucket_name=${{ vars.S3_BUCKET_NAME }}" \
      #       -var="db_identifier=${{ vars.DB_IDENTIFIER }}" \
      #       -var="ssm_parameter_access=${{ secrets.SSM_PARAMETER_ACCESS }}" \
      #       -var="db_username=${{ secrets.DB_USERNAME }}" \
      #       -var="db_password=${{ secrets.DB_PASSWORD }}" \
      #       -var="db_host=${{ secrets.DB_HOST }}" \
      #       -var="db_secret_name=${{ secrets.DB_SECRET_NAME }}" \
      #       -var="seeder_container=${{ secrets.SEEDER_CONTAINER }}" \
       
      - name: Set up TFLint
        uses: terraform-linters/setup-tflint@v4
        with:
          tflint_version: latest

      - name: Run TFLint 
        run: tflint --recursive || true


      - name: Terraform Plan
        run: |
          terraform plan \
            -var="domain_name=${{ vars.DOMAIN_NAME }}" \
            -var="project_name=${{ vars.PROJECT_NAME }}" \
            -var="record_name=${{ vars.RECORD_NAME }}" \
            -var="task_role_arn=${{ secrets.TASK_ROLE_ARN }}" \
            -var="execution_role_arn=${{ secrets.EXECUTION_ROLE_ARN }}" \      
            -var="db_name=${{ vars.DB_NAME }}" \
            -var="s3_bucket_name=${{ vars.S3_BUCKET_NAME }}" \
            -var="db_identifier=${{ vars.DB_IDENTIFIER }}" \
            -var="ssm_parameter_access=${{ secrets.SSM_PARAMETER_ACCESS }}" \
            -var="db_username=${{ secrets.DB_USERNAME }}" \
            -var="db_password=${{ secrets.DB_PASSWORD }}" \
            -var="db_host=${{ secrets.DB_HOST }}" \
            -var="db_secret_name=${{ secrets.DB_SECRET_NAME }}"\
            -var="seeder_container=${{ secrets.SEEDER_CONTAINER }}" \
            -input=false \
            -out=tfplan

      - name: Upload Terraform Plan to s3
        run: |
          aws s3 cp tfplan s3://${{ secrets.TERRAFORM_STATE_BUCKET }}/tfplan

  