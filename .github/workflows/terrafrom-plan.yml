name: Terraform Plan

on:
  workflow_dispatch:
    inputs:
      confirm_plan:
        description: 'Type "plan" to confirm generating a plan'
        required: true
        type: string
      container_image:
        description: "Full ECR image URI with tag (e.g., 123456789012.dkr.ecr.us-east-1.amazonaws.com/my-app:latest)"
        required: true
        type: string

permissions:
  contents: read
  pull-requests: write
  actions: write

jobs:
  security_quality_checks:
    name: "Security & Quality Checks"
    runs-on: ubuntu-latest
    if: github.event.inputs.confirm_plan == 'plan'

    defaults:
      run:
        working-directory: ./terraform

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Download tfvars from S3
        run: aws s3 cp s3://my-apps-state-bucket12/configs/terraform.tfvars terraform.tfvars

      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v1
        continue-on-error: true
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        with:
          projectBaseDir: ./terraform
          args: >
            -Dsonar.projectKey=${{ vars.PROJECT_NAME }}
            -Dsonar.projectName=${{ vars.PROJECT_NAME }}
            -Dsonar.organization=${{ vars.SONAR_ORGANIZATION }}
            -Dsonar.sources=.
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install Rust
        run: |
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH
      - name: Verify Rust Installation
        run: rustc --version

      - name: Install rustworkx before Checkov
        run: |
          pip install rustworkx
          pip install --upgrade pip
          pip install --prefer-binary checkov
      - name: Run Checkov
        run: checkov -d . --soft-fail

  terraform_plan:
    name: "Terraform Plan"
    runs-on: ubuntu-latest
    needs: security_quality_checks
    if: github.event.inputs.confirm_plan == 'plan'

    defaults:
      run:
        working-directory: ./terraform

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0

      - name: Download tfvars from S3
        run: aws s3 cp s3://my-apps-state-bucket12/configs/terraform.tfvars terraform.tfvars

      - name: Terraform Init
        run: |
          terraform init -input=false \
            -backend-config="bucket=${{ secrets.TERRAFORM_STATE_BUCKET }}" \
            -backend-config="key=${{ secrets.TERRAFORM_STATE_KEY }}" \
            -backend-config="region=${{ secrets.AWS_REGION }}" \
            -backend-config="encrypt=true"

      - name: Terraform Validate
        run: terraform validate

      - name: Set up TFLint
        uses: terraform-linters/setup-tflint@v4
        with:
          tflint_version: latest

      - name: Run TFLint
        run: tflint --recursive || true

      - name: Terraform Plan
        run: |
          terraform plan -input=false \
            -var="container_image=${{ github.event.inputs.container_image }}" \
            -out=tfplan

      - name: Upload Terraform Plan to s3
        run: |
          aws s3 cp tfplan s3://${{ secrets.TERRAFORM_STATE_BUCKET }}/tfplan
